type UniswapFactory @entity {
  id: ID!
  pairCount: Int!
  totalVolumeUSD: Float!
  totalVolumeETH: Float!
  untrackedVolumeUSD: Float!
  totalLiquidityUSD: Float!
  totalLiquidityETH: Float!
  txCount: BigInt!
}

type Token @entity {
  id: ID!
  symbol: String!
  name: String!
  decimals: BigInt!
  totalSupply: BigInt!
  tradeVolume: Float!
  tradeVolumeUSD: Float!
  untrackedVolumeUSD: Float!
  txCount: BigInt!
  totalLiquidity: Float!
  derivedETH: Float!
  whitelistPools: [String!]!
}

type Pair @entity {
  id: ID!
  token0: Token!
  token1: Token!
  reserve0: Float!
  reserve1: Float!
  totalSupply: Float!
  reserveETH: Float!
  reserveUSD: Float!
  trackedReserveETH: Float!
  token0Price: Float!
  token1Price: Float!
  volumeToken0: Float!
  volumeToken1: Float!
  volumeUSD: Float!
  untrackedVolumeUSD: Float!
  txCount: BigInt!
  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!
}

type Transaction @entity {
  id: ID!
  blockNumber: BigInt!
  timestamp: BigInt!
  mints: [Mint!]! @derivedFrom(field: "transaction")
  burns: [Burn!]! @derivedFrom(field: "transaction")
  swaps: [Swap!]! @derivedFrom(field: "transaction")
}

type Mint @entity {
  id: ID!
  transaction: Transaction!
  timestamp: BigInt!
  pair: Pair!
  to: String!
  liquidity: Float!
  sender: String
  amount0: Float
  amount1: Float
  logIndex: BigInt
  amountUSD: Float
}

type Burn @entity {
  id: ID!
  transaction: Transaction!
  timestamp: BigInt!
  pair: Pair!
  liquidity: Float!
  sender: String
  amount0: Float
  amount1: Float
  to: String
  logIndex: BigInt
  amountUSD: Float
}

type Swap @entity {
  id: ID!
  transaction: Transaction!
  timestamp: BigInt!
  pair: Pair!
  sender: String!
  from: String!
  amount0In: Float!
  amount1In: Float!
  amount0Out: Float!
  amount1Out: Float!
  to: String!
  logIndex: BigInt
  amountUSD: Float!
}

type Bundle @entity {
  id: ID!
  ethPrice: Float!
}


